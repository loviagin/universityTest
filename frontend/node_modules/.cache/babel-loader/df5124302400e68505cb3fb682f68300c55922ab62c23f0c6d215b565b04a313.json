{"ast":null,"code":"// frontend/src/actions/itemActions.js\n\n// Асинхронное получение задач с бекенда\nexport const fetchItems = () => {\n  return async dispatch => {\n    dispatch({\n      type: 'FETCH_ITEMS_REQUEST'\n    });\n    try {\n      const response = await fetch('http://localhost:5000/api/items');\n      const data = await response.json();\n      dispatch({\n        type: 'FETCH_ITEMS_SUCCESS',\n        payload: data\n      });\n    } catch (error) {\n      dispatch({\n        type: 'FETCH_ITEMS_FAILURE',\n        payload: error.message\n      });\n    }\n  };\n};\nexport const addItem = item => {\n  return async dispatch => {\n    try {\n      const response = await fetch('http://localhost:5000/api/items', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text: item.text\n        })\n      });\n      const newItem = await response.json();\n      dispatch({\n        type: 'ADD_ITEM',\n        payload: newItem\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n};\nexport const updateItem = item => {\n  return async dispatch => {\n    try {\n      const response = await fetch(`http://localhost:5000/api/items/${item.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text: item.text\n        })\n      });\n      const updatedItem = await response.json();\n      dispatch({\n        type: 'UPDATE_ITEM',\n        payload: updatedItem\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n};\nexport const deleteItem = id => {\n  return async dispatch => {\n    try {\n      await fetch(`http://localhost:5000/api/items/${id}`, {\n        method: 'DELETE'\n      });\n      dispatch({\n        type: 'DELETE_ITEM',\n        payload: id\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n};","map":{"version":3,"names":["fetchItems","dispatch","type","response","fetch","data","json","payload","error","message","addItem","item","method","headers","body","JSON","stringify","text","newItem","console","updateItem","id","updatedItem","deleteItem"],"sources":["/Users/ilialoviagin/Library/Mobile Documents/com~apple~CloudDocs/МИРЭА/4 сем/universitytest/frontend/src/actions/itemActions.js"],"sourcesContent":["// frontend/src/actions/itemActions.js\n\n// Асинхронное получение задач с бекенда\nexport const fetchItems = () => {\n    return async dispatch => {\n      dispatch({ type: 'FETCH_ITEMS_REQUEST' });\n      try {\n        const response = await fetch('http://localhost:5000/api/items');\n        const data = await response.json();\n        dispatch({ type: 'FETCH_ITEMS_SUCCESS', payload: data });\n      } catch (error) {\n        dispatch({ type: 'FETCH_ITEMS_FAILURE', payload: error.message });\n      }\n    };\n  };\n  \n  export const addItem = (item) => {\n    return async dispatch => {\n      try {\n        const response = await fetch('http://localhost:5000/api/items', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ text: item.text })\n        });\n        const newItem = await response.json();\n        dispatch({ type: 'ADD_ITEM', payload: newItem });\n      } catch (error) {\n        console.error(error);\n      }\n    };\n  };\n  \n  export const updateItem = (item) => {\n    return async dispatch => {\n      try {\n        const response = await fetch(`http://localhost:5000/api/items/${item.id}`, {\n          method: 'PUT',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ text: item.text })\n        });\n        const updatedItem = await response.json();\n        dispatch({ type: 'UPDATE_ITEM', payload: updatedItem });\n      } catch (error) {\n        console.error(error);\n      }\n    };\n  };\n  \n  export const deleteItem = (id) => {\n    return async dispatch => {\n      try {\n        await fetch(`http://localhost:5000/api/items/${id}`, {\n          method: 'DELETE'\n        });\n        dispatch({ type: 'DELETE_ITEM', payload: id });\n      } catch (error) {\n        console.error(error);\n      }\n    };\n  };"],"mappings":"AAAA;;AAEA;AACA,OAAO,MAAMA,UAAU,GAAGA,CAAA,KAAM;EAC5B,OAAO,MAAMC,QAAQ,IAAI;IACvBA,QAAQ,CAAC;MAAEC,IAAI,EAAE;IAAsB,CAAC,CAAC;IACzC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iCAAiC,CAAC;MAC/D,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClCL,QAAQ,CAAC;QAAEC,IAAI,EAAE,qBAAqB;QAAEK,OAAO,EAAEF;MAAK,CAAC,CAAC;IAC1D,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdP,QAAQ,CAAC;QAAEC,IAAI,EAAE,qBAAqB;QAAEK,OAAO,EAAEC,KAAK,CAACC;MAAQ,CAAC,CAAC;IACnE;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMC,OAAO,GAAIC,IAAI,IAAK;EAC/B,OAAO,MAAMV,QAAQ,IAAI;IACvB,IAAI;MACF,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,iCAAiC,EAAE;QAC9DQ,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,IAAI,EAAEN,IAAI,CAACM;QAAK,CAAC;MAC1C,CAAC,CAAC;MACF,MAAMC,OAAO,GAAG,MAAMf,QAAQ,CAACG,IAAI,CAAC,CAAC;MACrCL,QAAQ,CAAC;QAAEC,IAAI,EAAE,UAAU;QAAEK,OAAO,EAAEW;MAAQ,CAAC,CAAC;IAClD,CAAC,CAAC,OAAOV,KAAK,EAAE;MACdW,OAAO,CAACX,KAAK,CAACA,KAAK,CAAC;IACtB;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMY,UAAU,GAAIT,IAAI,IAAK;EAClC,OAAO,MAAMV,QAAQ,IAAI;IACvB,IAAI;MACF,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAmCO,IAAI,CAACU,EAAE,EAAE,EAAE;QACzET,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,IAAI,EAAEN,IAAI,CAACM;QAAK,CAAC;MAC1C,CAAC,CAAC;MACF,MAAMK,WAAW,GAAG,MAAMnB,QAAQ,CAACG,IAAI,CAAC,CAAC;MACzCL,QAAQ,CAAC;QAAEC,IAAI,EAAE,aAAa;QAAEK,OAAO,EAAEe;MAAY,CAAC,CAAC;IACzD,CAAC,CAAC,OAAOd,KAAK,EAAE;MACdW,OAAO,CAACX,KAAK,CAACA,KAAK,CAAC;IACtB;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMe,UAAU,GAAIF,EAAE,IAAK;EAChC,OAAO,MAAMpB,QAAQ,IAAI;IACvB,IAAI;MACF,MAAMG,KAAK,CAAC,mCAAmCiB,EAAE,EAAE,EAAE;QACnDT,MAAM,EAAE;MACV,CAAC,CAAC;MACFX,QAAQ,CAAC;QAAEC,IAAI,EAAE,aAAa;QAAEK,OAAO,EAAEc;MAAG,CAAC,CAAC;IAChD,CAAC,CAAC,OAAOb,KAAK,EAAE;MACdW,OAAO,CAACX,KAAK,CAACA,KAAK,CAAC;IACtB;EACF,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}